实验设计：package experiment
实验一：证明预处理操作可以提升性能
	1.预处理包括：
		1）sid代替content；
		2）sid-index索引结构；
	2.预处理思想：
		1）使用sid代替content，优化空间；
		2）sid-index索引结构，优化下一层序列产生；
		3）sid与索引结构均是对挖掘算法的优化，对应系统中的motif挖掘和频繁序列模式挖掘；
	3.实验设计：
		这里以频繁序列模式挖掘为例，测试预处理性能；
		采用单线程实验；
		序列数据库读入内存，Index索引结构读入内存，均为内存算法；
		1）实验组：使用sid+索引优化的方法，采用Apriori广度优先启发式搜索
		2）对照组：使用原始数据，采用Apriori广度优先启发式搜索
		3）两者采用相同的剪枝策略；对照组下一层序列产生使用扫描序列数据库的方法；实验组下一层序列产生基于索引结构
		4）代码：	SimpleMining-对照组；MiningWithIndex-实验组
	4.实验数据
		使用TestDataGenerator产生长度为均为10000条的三个日志文件，其中：
			1）最长序列长度为5
			2）日志内容包括:aaaaaaaaaa,bbbbbbbbbb,cccccccccc,dddddddddd,eeeeeeeeee
			3）相邻日志间隔1s,最大gap支持6s
			4）日志文件随机产生
	5.实验结果：
		1.实验组：
		结果数：520；
		用时(ms)：203,219,226
		2.对照组：
		结果数：520；
		用时(ms)：4348，4341,4381
	6.复杂度分析：
		搜索框架与剪枝策略完全一致，区别体现在下一层产生：实验组Index采用归并合并，对照组采用扫描序列数据库的方法；
		newSeq = seq1+word//word可以看作长度为1的seq
		实验组：归并合并：O(logNum*(len(seq1.Index[log])+len(word.Index[log])))
		对照组：扫描数据库：O(序列数据库条目数*在该条上做fired匹配)//序列数据库条目数==日志文件个数
			其中fired匹配最好情况是len(newSeq)，最坏情况是日志序列长
